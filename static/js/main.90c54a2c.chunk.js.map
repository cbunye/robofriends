{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","robots.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","src_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filteredRobots","filter","toLowerCase","includes","src_SearchBox","src_CardList","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCHSC,EAZF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GAC5B,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,cACrBC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCcOS,EApBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OAEnB,OACCR,EAAAC,EAAAC,cAAA,WAEEM,EAAOC,IAAI,SAACC,EAAMC,GACjB,OACCX,EAAAC,EAAAC,cAACU,EAAD,CACCC,IAAKF,EACLZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCCTgB,EAbG,SAAAlB,GAAkCA,EAA/BmB,YAA+B,IAAlBC,EAAkBpB,EAAlBoB,aACjC,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACAC,UAAU,yBACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCTAR,EAAS,CACtB,CACCT,GAAI,EACJF,KAAM,eACNuB,SAAU,YACVtB,MAAO,sBAER,CACCC,GAAI,EACJF,KAAM,eACNuB,SAAU,OACVtB,MAAO,qBAER,CACCC,GAAI,EACJF,KAAM,mBACNuB,SAAU,aACVtB,MAAO,yBAER,CACCC,GAAI,EACJF,KAAM,cACNuB,SAAU,QACVtB,MAAO,oBAER,CACCC,GAAI,EACJF,KAAM,cACNuB,SAAU,aACVtB,MAAO,sBAER,CACCC,GAAI,EACJF,KAAM,kBACNuB,SAAU,aACVtB,MAAO,qBAER,CACCC,GAAI,EACJF,KAAM,iBACNuB,SAAU,OACVtB,MAAO,sBAER,CACCC,GAAI,EACJF,KAAM,eACNuB,SAAU,YACVtB,MAAO,sBAER,CACCC,GAAI,EACJF,KAAM,eACNuB,SAAU,aACVtB,MAAO,uBCpBOuB,cA3Bd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAODI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAP1CX,EAAKY,MAAQ,CACZ1B,OAAQA,EACRO,YAAY,IAJAO,wEAYJ,IAAAa,EAAAV,KACHW,EAAiBX,KAAKS,MAAM1B,OAAO6B,OAAO,SAAA7B,GAC/C,OAAOA,EAAOX,KAAKyC,cAAcC,SAASJ,EAAKD,MAAMnB,YAAYuB,iBAG/D,OACItC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACsC,EAAD,CAAWxB,aAAgBS,KAAKI,iBAChC7B,EAAAC,EAAAC,cAACuC,EAAD,CAAUjC,OAAQ4B,YAtBbM,aCElBC,IAASC,OACP5C,EAAAC,EAAAC,cAAC2C,EAAD,MACAC,SAASC,eAAe,SNwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.90c54a2c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n\nconst Card = ({ name, email, id }) => { //props\n\treturn (\n\t\t<div className='tc bg-gray dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\t\n\t\t</div>\t\t\t\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\temail={robots[i].email} \n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\tclassName='pa3 ba b--pink bg-pink'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox;","export const robots = [\n{\n\tid: 0,\n\tname: 'James Harden',\n\tusername: 'the beard',\n\temail: 'j.harden@gmail.com'\n},\n{\n\tid: 1,\n\tname: 'Lebron James',\n\tusername: 'king',\n\temail: 'l.james@gmail.com'\n},\n{\n\tid: 2,\n\tname: 'Russel Westbrook',\n\tusername: 'beastbrook',\n\temail: 'r.westbrook@gmail.com'\n},\n{\n\tid: 3,\n\tname: 'Dwayne Wade',\n\tusername: 'flash',\n\temail: 'd.wade@gmail.com'\n},\n{\n\tid: 4,\n\tname: 'Kobe Bryant',\n\tusername: 'blackmamba',\n\temail: 'k.bryant@gmail.com'\n},\n{\n\tid: 5,\n\tname: 'Shaquille Oneal',\n\tusername: 'Big Diesel',\n\temail: 's.oneal@gmail.com'\n},\n{\n\tid: 7,\n\tname: 'Michael Jordan',\n\tusername: 'GOAT',\n\temail: 'm.jordan@gmail.com'\n},\n{\n\tid: 8,\n\tname: 'Kevin Durant',\n\tusername: 'durantula',\n\temail: 'k.durant@gmail.com'\n},\n{\n\tid: 9,\n\tname: 'Kyrie Irving',\n\tusername: 'uncle drew',\n\temail: 'k.irving@gmail.com'\n},\n\n]","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport { robots } from './robots';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: robots,\n\t\t\tsearchfield:''\n\t\t}\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n\t}\n\n\trender () {\n\t\tconst filteredRobots = this.state.robots.filter(robots =>{\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\n\t    return (\n\t        <div className='tc'>\n\t            <h1>RoboFriends</h1>\n\t            <SearchBox searchChange = {this.onSearchChange} />\n\t            <CardList robots={filteredRobots} />\n\t        </div>\n\t    );\n\t}\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(\n\t\t<App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}